# 📊 **表データの読み書き【応用編】 様々なデータの加工**

---

## 📁 使用するCSVファイル（例）

```
名前,国語,数学,英語,理科,社会
A太,83,89,76,97,76
B介,66,93,75,88,76
C子,100,84,96,82,94
D郎,60,73,63,52,70
E美,92,62,84,80,78
F菜,96,92,94,92,90

```

---

## 1️⃣ **条件でデータを抽出（フィルタリング）**

### ✅ サンプルコード

```python
import pandas as pd

# CSVファイルを読み込む
df = pd.read_csv("test.csv")

# 国語が90点以上のデータ
data_s = df[df["国語"] >= 90]
print("国語が90点以上\n", data_s)

# 数学が70点未満のデータ
data_c = df[df["数学"] < 70]
print("数学が70点未満\n", data_c)

```

### ✔️ ポイント

- `df[条件式]` → **特定の条件に一致する行のみを抽出**
- **新しいDataFrameに格納**して使える

---

## 2️⃣ **列の集計（最大・最小・平均・中央値・合計）**

### ✅ サンプルコード

```python
import pandas as pd

# CSVファイルを読み込む
df = pd.read_csv("test.csv")

# 集計
print("数学の最高点＝", df["数学"].max())
print("数学の最低点＝", df["数学"].min())
print("数学の平均値＝", df["数学"].mean())
print("数学の中央値＝", df["数学"].median())
print("数学の合計＝", df["数学"].sum())

```

### ✔️ ポイント

- `.max()`, `.min()`, `.mean()`, `.median()`, `.sum()`
    
    → **列単位の基本的な統計量を簡単に取得可能**
    

---

## 3️⃣ **ソート（並べ替え）**

### ✅ サンプルコード

```python
import pandas as pd

# CSVファイルを読み込む
df = pd.read_csv("test.csv")

# 国語の点数が高い順にソート
kokugo = df.sort_values("国語", ascending=False)
print("国語の点数が高いもの順でソート\n", kokugo)

```

### ✔️ ポイント

| 引数 | 説明 |
| --- | --- |
| `ascending=True` | 昇順（小さい順） |
| `ascending=False` | 降順（大きい順） |

⚠️ ソートは **元のDataFrameは変更せず**、新しいDataFrame（ここでは `kokugo`）が生成される。

---

## 4️⃣ **行と列を入れ替え／リスト化**

### ✅ サンプルコード

```python
import pandas as pd

# CSVファイルを読み込む
df = pd.read_csv("test.csv")

# 行と列を入れ替える（転置）
print("行と列を入れ替える\n", df.T)

# データをリスト化（NumPy配列に変換）
print("Pythonのリストデータ化\n", df.values)

```

### ✔️ ポイント

| 操作 | 説明 |
| --- | --- |
| `.T` | 転置（行⇔列） |
| `.values` | NumPy配列（リストのリスト）として取得 |

---

## 5️⃣ **CSVに書き出す（エクスポート）**

### ✅ 基本（インデックス付き）

```python
kokugo.to_csv("export1.csv")

```

### ✅ インデックスなしで出力

```python
kokugo.to_csv("export2.csv", index=False)

```

### ✅ インデックス・ヘッダーなしで出力

```python
kokugo.to_csv("export3.csv", index=False, header=False)

```

### ✔️ ポイント

| オプション | 説明 |
| --- | --- |
| `index=False` | 行番号（インデックス）を出力しない |
| `header=False` | 列名（ヘッダー）も出力しない |

---

## ✅ **まとめ表：今回学んだ加工操作**

| 操作内容 | コマンド例 | 説明 |
| --- | --- | --- |
| 条件抽出 | `df[df["国語"] >= 90]` | 条件に合う行を取得 |
| 集計 | `.max()`, `.mean()`, etc. | 列の統計量取得 |
| ソート | `df.sort_values("国語")` | 並べ替え（元データは保持） |
| 転置 | `df.T` | 行と列を入れ替え |
| 配列化 | `df.values` | NumPy配列化 |
| CSV出力 | `to_csv(...)` | データをファイル保存 |

---

## 🎯 学びのポイント

✅ **条件抽出 → 集計 → ソート → 出力**

→ データ分析の基本パターンが自然に身につく！

✅ **出力時のオプション指定**（index / header）

→ **きれいなCSVを作成**して他のツールでも使える
