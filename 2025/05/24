≪Python2年生(第二版)スクレイピングのしくみp70≫

## このコードでできること

Pythonの`requests`と`pathlib`を使って、**指定した画像URLから画像ファイルをダウンロードし、ローカルフォルダに保存**します。

---

## 💻 実行したコード

```python
import requests
from pathlib import Path

# 保存用フォルダを作る
out_folder = Path("download")
out_folder.mkdir(exist_ok=True)

# 画像ファイルを取得する
image_url = "https://www.ymori.com/books/python2nen/sample1.png"
imgdata = requests.get(image_url)

# URLから最後のファイル名を取り出して、保存フォルダ名とつなげる
filename = image_url.split("/")[-1]
out_path = out_folder.joinpath(filename)

# 画像データを、ファイルに書き出す
with open(out_path, mode="wb") as f:
    f.write(imgdata.content)

```

---

## 📦 ライブラリのインポート

```python
import requests
from pathlib import Path

```

| ライブラリ | 説明 |
| --- | --- |
| `requests` | インターネット上からファイルやHTMLなどを取得するためのライブラリ |
| `pathlib` | ファイルやディレクトリの「パス」をオブジェクトとして操作できる標準ライブラリ |

---

## 📁 保存先フォルダの準備

```python
out_folder = Path("download")
out_folder.mkdir(exist_ok=True)

```

### ✅ 解説

- `Path("download")`: 「download」という名前のフォルダの**パスオブジェクト**を作成
- `.mkdir(exist_ok=True)`:
    - フォルダが**無ければ作成**
    - フォルダが**既にあってもエラーにしない**

🔒 エラーが出ず、**繰り返し実行しても安全**なコードになります。

---

## 🌐 画像データの取得

```python
image_url = "https://www.ymori.com/books/python2nen/sample1.png"
imgdata = requests.get(image_url)

```

- `image_url`: ダウンロード対象の画像ファイルのURL
- `requests.get(...)`: URLにアクセスし、画像データを取得

📦 `imgdata.content` で画像ファイルの**バイナリデータ**が取り出せます。

---

## 📌 保存するファイル名と保存先のパスを決定

```python
filename = image_url.split("/")[-1]
out_path = out_folder.joinpath(filename)

```

| 処理内容 | 解説 |
| --- | --- |
| `split("/")[-1]` | URLの末尾から**ファイル名（例: sample1.png）**を取得 |
| `joinpath(...)` | フォルダとファイル名を結合して**完全な保存パス**を作成 |

---

## 💾 画像を保存する

```python
with open(out_path, mode="wb") as f:
    f.write(imgdata.content)

```

- `mode="wb"` → バイナリ書き込みモード（画像や音声など非テキスト用）
- `with` 構文 → 自動でファイルを閉じてくれる安全設計
- `.write(...)` → 画像の中身をファイルに書き込む

🧠 `with open(...) as f:` の形式は**ファイル操作の基本パターン**です。

---

## ✅ 処理の流れまとめ

| ステップ | 処理内容 | 目的 |
| --- | --- | --- |
| ① | `Path("download")` | 保存フォルダの場所を指定 |
| ② | `.mkdir(exist_ok=True)` | フォルダがなければ作成 |
| ③ | `requests.get(image_url)` | 画像データを取得 |
| ④ | `.split("/")[-1]` | URLからファイル名を抽出 |
| ⑤ | `.joinpath(filename)` | 保存先のフルパスを生成 |
| ⑥ | `with open(..., "wb")` | ファイルを開いて画像データを書き出す |

---

## 📚 補足：Path（パス）とは？

**パス = ファイルやフォルダの「場所」を示す情報**
### 📌 例：Windows のパス
```
C:\Users\YourName\Documents\report.docx
```
### 📌 例：Linux/macOS のパス
```
/home/yourname/documents/report.txt
```
Pathを正しく扱うことで、どこにファイルを置くか／取得するかを制御できます。
