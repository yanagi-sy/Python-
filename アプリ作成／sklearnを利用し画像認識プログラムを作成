# 🤖 画像認識AI作成体験学習【基礎：手書き数字予測プログラム】

---
##学習目的
・基本ライブラリ利用の応用
・機械学習を体験
・アプリケーション作成の復習

## 🎯 このプログラムでできること

✅ ファイル選択ダイアログから **手書き数字の画像ファイル** を選択
✅ 画像を **8×8グレースケール化**
✅ **scikit-learnの学習済みモデル**（SVM）で **数字を予測**
✅ GUI上に **画像＋予測結果** を表示

---

## 🗂️ 使用ライブラリ

| ライブラリ                      | 用途               |
| -------------------------- | ---------------- |
| `tkinter`                  | GUI構築            |
| `tkinter.filedialog`       | ファイル選択ダイアログ      |
| `PIL.Image`, `PIL.ImageTk` | 画像読み込み・表示        |
| `scikit-learn.datasets`    | 学習用データセット（手書き数字） |
| `scikit-learn.svm`         | 機械学習モデル（SVM分類器）  |
| `numpy`                    | 数値データ変換・行列操作     |

---

## 💻 サンプルコード全文

```python
import tkinter as tk
import tkinter.filedialog as fd
import PIL.Image
import PIL.ImageTk
# 機械学習用
import sklearn.datasets
import sklearn.svm
import numpy

# 画像ファイルを数値リストに変換
def imageToData(filename):
    grayImage = PIL.Image.open(filename).convert("L")
    grayImage = grayImage.resize((8,8),PIL.Image.Resampling.LANCZOS)
    
    dispImage = PIL.ImageTk.PhotoImage(grayImage.resize((300,300), resample=0))
    imageLabel.configure(image=dispImage)
    imageLabel.image = dispImage
    
    numImage = numpy.asarray(grayImage, dtype=float)
    numImage = 16 - numpy.floor(17 * numImage / 256)
    numImage = numImage.flatten()
    return numImage

# 数字を予測する
def predictDigits(data):
    digits = sklearn.datasets.load_digits()
    clf = sklearn.svm.SVC(gamma=0.001)
    clf.fit(digits.data, digits.target)
    
    n = clf.predict([data])
    textLabel.configure(text="この画像は " + str(n) + " です！")

# ファイル選択ダイアログ
def openfile():
    fpath = fd.askopenfilename()
    if fpath:
        data = imageToData(fpath)
        predictDigits(data)

# アプリのウィンドウ
root = tk.Tk()
root.geometry("400x400")

btn = tk.Button(root, text="ファイルを開く", command=openfile)
imageLabel = tk.Label()
btn.pack()
imageLabel.pack()

textLabel = tk.Label(text="手書きの数字を認識します！")
textLabel.pack()

tk.mainloop()
```

---

## 🧩 機能別解説

---

### ① 画像 → 数値データ変換

```python
def imageToData(filename):
    grayImage = PIL.Image.open(filename).convert("L")
    grayImage = grayImage.resize((8,8), PIL.Image.Resampling.LANCZOS)
    ...
```

| 処理                | 説明              |
| ----------------- | --------------- |
| `.convert("L")`   | グレースケール化        |
| `.resize((8,8))`  | 8x8ピクセルへ縮小      |
| `numpy.asarray()` | NumPy配列化（float） |
| ピクセル正規化           | 0〜16にスケーリング     |
| `.flatten()`      | 64要素の1次元配列に変換   |

---

### ② 学習データ → モデル学習＆予測

```python
digits = sklearn.datasets.load_digits()
clf = sklearn.svm.SVC(gamma=0.001)
clf.fit(digits.data, digits.target)
n = clf.predict([data])
```

| 処理              | 説明                    |
| --------------- | --------------------- |
| `load_digits()` | 学習用データセット（8×8手書き数字画像） |
| `SVC()`         | サポートベクター分類器           |
| `fit()`         | データとラベルで学習            |
| `predict()`     | 予測結果（数字）を返す           |

---

### ③ GUI操作

```python
root = tk.Tk()
root.geometry("400x400")

btn = tk.Button(root, text="ファイルを開く", command=openfile)
imageLabel = tk.Label()
btn.pack()
imageLabel.pack()

textLabel = tk.Label(text="手書きの数字を認識します！")
textLabel.pack()

tk.mainloop()
```

| ウィジェット               | 説明           |
| -------------------- | ------------ |
| `Button`             | 「ファイルを開く」ボタン |
| `Label` (imageLabel) | 選択画像を表示      |
| `Label` (textLabel)  | 予測結果を表示      |
| `mainloop()`         | GUIイベントループ開始 |

---

## 🔍 改善提案と学びのポイント

---

### 1️⃣ データ改善

* **より多様なデータセット**（例：MNIST）を利用
* **独自データ作成** → 汎化性能UP

---

### 2️⃣ モデル改善

| 改善策          | 説明                    |
| ------------ | --------------------- |
| CNN導入        | 畳み込みニューラルネットワーク（画像特化） |
| RandomForest | 汎用的な高性能分類器            |
| KNN          | シンプルで効果的な近傍法          |
| SVMのパラメータ最適化 | `gamma`, `C` などを調整    |

---

### 3️⃣ 前処理改善

| 方法     | 効果                |
| ------ | ----------------- |
| 高解像度保持 | 16×16 や 28×28 にする |
| 二値化    | 背景と数字を明確に分離       |
| ノイズ除去  | ノイズによる誤判定防止       |
| 正規化    | モデル学習が安定する        |

---

## 🚀 学習の成果と次への発展

✅ **「機械学習モデル作成の流れ」を一通り体験**
✅ **画像 → データ変換 → 予測 → GUI表示** の連携理解
✅ **前処理やモデル選択の重要性** を実感
