# 📘 郵便番号データ分析 学習記録

---

データファイル：`13TOKYO.CSV`

目的：pandas を用いた郵便番号データの読み込み・検索処理の習得

---

## ✅ ① 郵便番号データの基本読み込みと情報確認

```python
import pandas as pd

#CSVファイルを読み込む
df=pd.read_csv("13TOKYO.CSV",header=None,encoding="shift_jis",dtype=str)
print(len(df))
print(df.columns.values)

```

### 🔍 解説

- `pd.read_csv(...)`：
    - `"13TOKYO.CSV"` を読み込む。
    - `header=None`：列名の行が存在しないと明示。
    - `encoding="shift_jis"`：日本語対応。
    - `dtype=str`：すべての列を文字列として読み込む（郵便番号の先頭ゼロの保持に重要）。
- `print(len(df))`：行数を出力（データ件数）。
- `print(df.columns.values)`：列インデックスを確認（0,1,2,…）。

---

## ✅ ② 特定の郵便番号を検索し、住所情報を抽出

```python
import pandas as pd

#CSVファイルをデータフレームに読み込む
df=pd.read_csv("13TOKYO.CSV",header=None,encoding="shift_jis",dtype=str)

#「2」の列が「1600006」の住所を抽出して表示
results=df[df[2]=="1600006"]
print(results[[2,6,7,8]])

```

### 🔍 解説

- データ読み込み設定は①と同じ。
- `df[2] == "1600006"`：
    - 第3列（インデックス2）を郵便番号列として判定。
- `df[df[2]=="1600006"]`：
    - 該当郵便番号に一致する行だけを抽出し、`results`に格納。
- `print(results[[2,6,7,8]])`：
    - 郵便番号（2列目）、都道府県名（6列目）、市区町村名（7列目）、町域（8列目）を表示。

---

## 🧾 補足メモ

- **対象ファイル**：13TOKYO.CSV（東京都の郵便番号データ）
- **エンコーディング注意点**：
    - 日本語CSVは `"shift_jis"` での読み込みが必須
- **文字列型で読み込む理由**：
    - 郵便番号などで先頭の0を保持したい場合
- **使える応用例**：
    - 特定地域の住所抽出
    - 郵便番号からの住所逆引き
    - 市区町村名の統計・集計処理の前段階処理としても活用可能
